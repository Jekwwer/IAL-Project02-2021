[unpack.log]
[hashtable-compilation.log]
gcc -Wall -std=c11 -pedantic -o hashtable/test hashtable/hashtable.c hashtable/test_advanced.c hashtable/test_util.c
[hashtable-1.log]
[test_table_init] Initialize the table
[PASS]

------------HASH TABLE--------------
0: 
1: 
2: 
3: 
4: 
5: 
6: 
7: 
8: 
9: 
10: 
11: 
12: 
------------------------------------
Total items in hash table: 0
Maximum hash collisions: 0
------------------------------------

[hashtable-2.log]
[test_search_nonexist] Search for a non-existing item
[PASS]

------------HASH TABLE--------------
0: 
1: 
2: 
3: 
4: 
5: 
6: 
7: 
8: 
9: 
10: 
11: 
12: 
------------------------------------
Total items in hash table: 0
Maximum hash collisions: 0
------------------------------------

[hashtable-3.log]
[test_insert_simple] Insert a new item
[PASS]

------------HASH TABLE--------------
0: (Ethereum,3208.67)
1: 
2: 
3: 
4: 
5: 
6: 
7: 
8: 
9: 
10: 
11: 
12: 
------------------------------------
Total items in hash table: 1
Maximum hash collisions: 0
------------------------------------

[hashtable-4.log]
[test_search_exist] Search for an existing item
[PASS]

------------HASH TABLE--------------
0: (Ethereum,3208.67)
1: 
2: 
3: 
4: 
5: 
6: 
7: 
8: 
9: 
10: 
11: 
12: 
------------------------------------
Total items in hash table: 1
Maximum hash collisions: 0
------------------------------------

[hashtable-5.log]
[test_insert_many] Insert many new items
[PASS]

------------HASH TABLE--------------
0: (Ethereum,3208.67)
1: 
2: 
3: (Avalanche,47.03)(Uniswap,21.68)(Dogecoin,0.22)
4: (Chainlink,21.90)(Terra,30.67)(XRP,0.93)
5: (Litecoin,156.87)
6: 
7: 
8: (Cardano,1.82)
9: (Solana,134.50)(Binance Coin,409.15)
10: (Tether,0.86)
11: (Bitcoin,53247.71)
12: (USD Coin,0.86)(Polkadot,34.99)
------------------------------------
Total items in hash table: 15
Maximum hash collisions: 2
------------------------------------

[hashtable-6.log]
[test_insert_collision] Check that item with a colliding hash is inserted at the beginning
[PASS]

------------HASH TABLE--------------
0: (Dthereun,0.10)(Ethereum,3208.67)
1: 
2: 
3: (Avalanche,47.03)(Uniswap,21.68)(Dogecoin,0.22)
4: (Chainlink,21.90)(Terra,30.67)(XRP,0.93)
5: (Litecoin,156.87)
6: 
7: 
8: (Cardano,1.82)
9: (Solana,134.50)(Binance Coin,409.15)
10: (Tether,0.86)
11: (Bitcoin,53247.71)
12: (USD Coin,0.86)(Polkadot,34.99)
------------------------------------
Total items in hash table: 16
Maximum hash collisions: 2
------------------------------------

[hashtable-7.log]
[test_search_collision] Search for an item with colliding hash
[PASS]

------------HASH TABLE--------------
0: (Ethereum,3208.67)
1: 
2: 
3: (Avalanche,47.03)(Uniswap,21.68)(Dogecoin,0.22)
4: (Chainlink,21.90)(Terra,30.67)(XRP,0.93)
5: (Litecoin,156.87)
6: 
7: 
8: (Cardano,1.82)
9: (Solana,134.50)(Binance Coin,409.15)
10: (Tether,0.86)
11: (Bitcoin,53247.71)
12: (USD Coin,0.86)(Polkadot,34.99)
------------------------------------
Total items in hash table: 15
Maximum hash collisions: 2
------------------------------------

[hashtable-8.log]
[test_insert_update] Update an item
[PASS]

------------HASH TABLE--------------
0: (Ethereum,3218.67)
1: 
2: 
3: (Avalanche,47.03)(Uniswap,21.68)(Dogecoin,0.22)
4: (Chainlink,21.90)(Terra,30.67)(XRP,0.93)
5: (Litecoin,156.87)
6: 
7: 
8: (Cardano,1.82)
9: (Solana,134.50)(Binance Coin,409.15)
10: (Tether,0.86)
11: (Bitcoin,53247.71)
12: (USD Coin,0.86)(Polkadot,34.99)
------------------------------------
Total items in hash table: 15
Maximum hash collisions: 2
------------------------------------

[hashtable-9.log]
[test_get] Get an item's value
[PASS]

------------HASH TABLE--------------
0: (Ethereum,3208.67)
1: 
2: 
3: (Avalanche,47.03)(Uniswap,21.68)(Dogecoin,0.22)
4: (Chainlink,21.90)(Terra,30.67)(XRP,0.93)
5: (Litecoin,156.87)
6: 
7: 
8: (Cardano,1.82)
9: (Solana,134.50)(Binance Coin,409.15)
10: (Tether,0.86)
11: (Bitcoin,53247.71)
12: (USD Coin,0.86)(Polkadot,34.99)
------------------------------------
Total items in hash table: 15
Maximum hash collisions: 2
------------------------------------

[hashtable-10.log]
[test_delete] Delete an item
[PASS]

------------HASH TABLE--------------
0: (Ethereum,3208.67)
1: 
2: 
3: (Avalanche,47.03)(Uniswap,21.68)(Dogecoin,0.22)
4: (Chainlink,21.90)(XRP,0.93)
5: (Litecoin,156.87)
6: 
7: 
8: (Cardano,1.82)
9: (Solana,134.50)(Binance Coin,409.15)
10: (Tether,0.86)
11: (Bitcoin,53247.71)
12: (USD Coin,0.86)(Polkadot,34.99)
------------------------------------
Total items in hash table: 14
Maximum hash collisions: 2
------------------------------------

[hashtable-11.log]
[test_delete_all] Delete all the items
[PASS]

------------HASH TABLE--------------
0: 
1: 
2: 
3: 
4: 
5: 
6: 
7: 
8: 
9: 
10: 
11: 
12: 
------------------------------------
Total items in hash table: 0
Maximum hash collisions: 0
------------------------------------

[hashtable-memcheck-11.log]
==45429== Memcheck, a memory error detector
==45429== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==45429== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==45429== Command: ./test 11
==45429== 
==45429== Invalid read of size 8
==45429==    at 0x400D55: ht_delete (in /homes/kazi/koutenmi/ialdu2/students/xshili00/hashtable/test)
==45429==    by 0x400DAF: ht_delete_all (in /homes/kazi/koutenmi/ialdu2/students/xshili00/hashtable/test)
==45429==    by 0x401940: test_delete_all (in /homes/kazi/koutenmi/ialdu2/students/xshili00/hashtable/test)
==45429==    by 0x401A65: main (in /homes/kazi/koutenmi/ialdu2/students/xshili00/hashtable/test)
==45429==  Address 0x54644c0 is 16 bytes inside a block of size 24 free'd
==45429==    at 0x484DD2C: free (in /usr/local/libexec/valgrind/vgpreload_memcheck-amd64-freebsd.so)
==45429==    by 0x400D44: ht_delete (in /homes/kazi/koutenmi/ialdu2/students/xshili00/hashtable/test)
==45429==    by 0x400DAF: ht_delete_all (in /homes/kazi/koutenmi/ialdu2/students/xshili00/hashtable/test)
==45429==    by 0x401940: test_delete_all (in /homes/kazi/koutenmi/ialdu2/students/xshili00/hashtable/test)
==45429==    by 0x401A65: main (in /homes/kazi/koutenmi/ialdu2/students/xshili00/hashtable/test)
==45429==  Block was alloc'd at
==45429==    at 0x484B8F4: malloc (in /usr/local/libexec/valgrind/vgpreload_memcheck-amd64-freebsd.so)
==45429==    by 0x400BC3: ht_insert (in /homes/kazi/koutenmi/ialdu2/students/xshili00/hashtable/test)
==45429==    by 0x401D5B: ht_insert_many (in /homes/kazi/koutenmi/ialdu2/students/xshili00/hashtable/test)
==45429==    by 0x401934: test_delete_all (in /homes/kazi/koutenmi/ialdu2/students/xshili00/hashtable/test)
==45429==    by 0x401A65: main (in /homes/kazi/koutenmi/ialdu2/students/xshili00/hashtable/test)
==45429== 
==45429== 
==45429== HEAP SUMMARY:
==45429==     in use at exit: 4,096 bytes in 1 blocks
==45429==   total heap usage: 18 allocs, 17 frees, 5,288 bytes allocated
==45429== 
==45429== LEAK SUMMARY:
==45429==    definitely lost: 0 bytes in 0 blocks
==45429==    indirectly lost: 0 bytes in 0 blocks
==45429==      possibly lost: 0 bytes in 0 blocks
==45429==    still reachable: 0 bytes in 0 blocks
==45429==         suppressed: 4,096 bytes in 1 blocks
==45429== 
==45429== For lists of detected and suppressed errors, rerun with: -s
==45429== ERROR SUMMARY: 15 errors from 1 contexts (suppressed: 1 from 1)
[btree-iter-compilation.log]
gcc -Wall -std=c11 -pedantic -o btree/iter/test btree/test_advanced.c btree/test_util_advanced.c btree/iter/btree.c btree/iter/stack.c
[btree-iter-1.log]
[test_tree_init] Initialize the tree
[PASS]

[btree-iter-2.log]
[test_tree_dispose_empty] Dispose the tree
[PASS]

[btree-iter-3.log]
[test_tree_search_empty] Search in an empty tree (A)
[PASS]

[btree-iter-4.log]
[test_tree_search_empty_result] Search in an empty tree (A) and check the result
[PASS]

[btree-iter-5.log]
[test_tree_insert_root_node] Insert an item (H,1)
[PASS]
Binary tree structure:

  +-[H,1]


[btree-iter-6.log]
[test_tree_insert_root_values] Insert an item (H,1)
[PASS]
Binary tree structure:

  +-[H,1]


[btree-iter-7.log]
[test_tree_insert_root_children] Insert an item (H,1)
[PASS]
Binary tree structure:

  +-[H,1]


[btree-iter-8.log]
[test_tree_search_root] Search in a single node tree (H)
[PASS]
Binary tree structure:

  +-[H,1]


[btree-iter-9.log]
[test_tree_search_root_result] Search in a single node tree (H)
[PASS]
Binary tree structure:

  +-[H,1]


[btree-iter-10.log]
[test_tree_update_root] Update a node in a single node tree (H,1)->(H,8)
Binary tree structure:

  +-[H,1]

[PASS]
Binary tree structure:

  +-[H,8]


[btree-iter-11.log]
[test_tree_insert_many] Insert many values
[PASS]
Binary tree structure:

           +-[O,16]
           |
        +-[N,14]
        |  |
        |  +-[M,13]
        |
     +-[L,12]
     |  |
     |  |  +-[K,11]
     |  |  |
     |  +-[J,10]
     |     |
     |     +-[I,9]
     |
  +-[H,8]
     |
     |     +-[G,7]
     |     |
     |  +-[F,6]
     |  |  |
     |  |  +-[E,5]
     |  |
     +-[D,4]
        |
        |  +-[C,3]
        |  |
        +-[B,2]
           |
           +-[A,1]


[btree-iter-12.log]
[test_tree_search] Search for an item deeper in the tree (A)
[PASS]
Binary tree structure:

           +-[O,16]
           |
        +-[N,14]
        |  |
        |  +-[M,13]
        |
     +-[L,12]
     |  |
     |  |  +-[K,11]
     |  |  |
     |  +-[J,10]
     |     |
     |     +-[I,9]
     |
  +-[H,8]
     |
     |     +-[G,7]
     |     |
     |  +-[F,6]
     |  |  |
     |  |  +-[E,5]
     |  |
     +-[D,4]
        |
        |  +-[C,3]
        |  |
        +-[B,2]
           |
           +-[A,1]


[btree-iter-13.log]
[test_tree_search_result] Search for an item deeper in the tree (A)
[PASS]
Binary tree structure:

           +-[O,16]
           |
        +-[N,14]
        |  |
        |  +-[M,13]
        |
     +-[L,12]
     |  |
     |  |  +-[K,11]
     |  |  |
     |  +-[J,10]
     |     |
     |     +-[I,9]
     |
  +-[H,8]
     |
     |     +-[G,7]
     |     |
     |  +-[F,6]
     |  |  |
     |  |  +-[E,5]
     |  |
     +-[D,4]
        |
        |  +-[C,3]
        |  |
        +-[B,2]
           |
           +-[A,1]


[btree-iter-14.log]
[test_tree_search_missing] Search for a missing key (X)
[PASS]
Binary tree structure:

           +-[O,16]
           |
        +-[N,14]
        |  |
        |  +-[M,13]
        |
     +-[L,12]
     |  |
     |  |  +-[K,11]
     |  |  |
     |  +-[J,10]
     |     |
     |     +-[I,9]
     |
  +-[H,8]
     |
     |     +-[G,7]
     |     |
     |  +-[F,6]
     |  |  |
     |  |  +-[E,5]
     |  |
     +-[D,4]
        |
        |  +-[C,3]
        |  |
        +-[B,2]
           |
           +-[A,1]


[btree-iter-15.log]
[test_tree_search_missing_result] Search for a missing key (X)
[PASS]
Binary tree structure:

           +-[O,16]
           |
        +-[N,14]
        |  |
        |  +-[M,13]
        |
     +-[L,12]
     |  |
     |  |  +-[K,11]
     |  |  |
     |  +-[J,10]
     |     |
     |     +-[I,9]
     |
  +-[H,8]
     |
     |     +-[G,7]
     |     |
     |  +-[F,6]
     |  |  |
     |  |  +-[E,5]
     |  |
     +-[D,4]
        |
        |  +-[C,3]
        |  |
        +-[B,2]
           |
           +-[A,1]


[btree-iter-16.log]
[test_tree_delete_leaf] Delete a leaf node (A)
Binary tree structure:

           +-[O,16]
           |
        +-[N,14]
        |  |
        |  +-[M,13]
        |
     +-[L,12]
     |  |
     |  |  +-[K,11]
     |  |  |
     |  +-[J,10]
     |     |
     |     +-[I,9]
     |
  +-[H,8]
     |
     |     +-[G,7]
     |     |
     |  +-[F,6]
     |  |  |
     |  |  +-[E,5]
     |  |
     +-[D,4]
        |
        |  +-[C,3]
        |  |
        +-[B,2]
           |
           +-[A,1]

[PASS]
Binary tree structure:

           +-[O,16]
           |
        +-[N,14]
        |  |
        |  +-[M,13]
        |
     +-[L,12]
     |  |
     |  |  +-[K,11]
     |  |  |
     |  +-[J,10]
     |     |
     |     +-[I,9]
     |
  +-[H,8]
     |
     |     +-[G,7]
     |     |
     |  +-[F,6]
     |  |  |
     |  |  +-[E,5]
     |  |
     +-[D,4]
        |
        |  +-[C,3]
        |  |
        +-[B,2]


[btree-iter-17.log]
[test_tree_delete_left_subtree] Delete a node with only left subtree (R)
Binary tree structure:

                    +-[Y,10]
                    |
                 +-[X,10]
                 |
              +-[S,10]
              |  |
              |  +-[R,10]
              |     |
              |     +-[Q,10]
              |        |
              |        +-[P,10]
              |
           +-[O,16]
           |
        +-[N,14]
        |  |
        |  +-[M,13]
        |
     +-[L,12]
     |  |
     |  |  +-[K,11]
     |  |  |
     |  +-[J,10]
     |     |
     |     +-[I,9]
     |
  +-[H,8]
     |
     |     +-[G,7]
     |     |
     |  +-[F,6]
     |  |  |
     |  |  +-[E,5]
     |  |
     +-[D,4]
        |
        |  +-[C,3]
        |  |
        +-[B,2]
           |
           +-[A,1]

[PASS]
Binary tree structure:

                    +-[Y,10]
                    |
                 +-[X,10]
                 |
              +-[S,10]
              |  |
              |  +-[Q,10]
              |     |
              |     +-[P,10]
              |
           +-[O,16]
           |
        +-[N,14]
        |  |
        |  +-[M,13]
        |
     +-[L,12]
     |  |
     |  |  +-[K,11]
     |  |  |
     |  +-[J,10]
     |     |
     |     +-[I,9]
     |
  +-[H,8]
     |
     |     +-[G,7]
     |     |
     |  +-[F,6]
     |  |  |
     |  |  +-[E,5]
     |  |
     +-[D,4]
        |
        |  +-[C,3]
        |  |
        +-[B,2]
           |
           +-[A,1]


[btree-iter-18.log]
[test_tree_delete_right_subtree] Delete a node with only right subtree (X)
Binary tree structure:

                    +-[Y,10]
                    |
                 +-[X,10]
                 |
              +-[S,10]
              |  |
              |  +-[R,10]
              |     |
              |     +-[Q,10]
              |        |
              |        +-[P,10]
              |
           +-[O,16]
           |
        +-[N,14]
        |  |
        |  +-[M,13]
        |
     +-[L,12]
     |  |
     |  |  +-[K,11]
     |  |  |
     |  +-[J,10]
     |     |
     |     +-[I,9]
     |
  +-[H,8]
     |
     |     +-[G,7]
     |     |
     |  +-[F,6]
     |  |  |
     |  |  +-[E,5]
     |  |
     +-[D,4]
        |
        |  +-[C,3]
        |  |
        +-[B,2]
           |
           +-[A,1]

[PASS]
Binary tree structure:

                 +-[Y,10]
                 |
              +-[S,10]
              |  |
              |  +-[R,10]
              |     |
              |     +-[Q,10]
              |        |
              |        +-[P,10]
              |
           +-[O,16]
           |
        +-[N,14]
        |  |
        |  +-[M,13]
        |
     +-[L,12]
     |  |
     |  |  +-[K,11]
     |  |  |
     |  +-[J,10]
     |     |
     |     +-[I,9]
     |
  +-[H,8]
     |
     |     +-[G,7]
     |     |
     |  +-[F,6]
     |  |  |
     |  |  +-[E,5]
     |  |
     +-[D,4]
        |
        |  +-[C,3]
        |  |
        +-[B,2]
           |
           +-[A,1]


[btree-iter-19.log]
[test_tree_delete_both_subtrees] Delete a node with both subtrees (L)
Binary tree structure:

                    +-[Y,10]
                    |
                 +-[X,10]
                 |
              +-[S,10]
              |  |
              |  +-[R,10]
              |     |
              |     +-[Q,10]
              |        |
              |        +-[P,10]
              |
           +-[O,16]
           |
        +-[N,14]
        |  |
        |  +-[M,13]
        |
     +-[L,12]
     |  |
     |  |  +-[K,11]
     |  |  |
     |  +-[J,10]
     |     |
     |     +-[I,9]
     |
  +-[H,8]
     |
     |     +-[G,7]
     |     |
     |  +-[F,6]
     |  |  |
     |  |  +-[E,5]
     |  |
     +-[D,4]
        |
        |  +-[C,3]
        |  |
        +-[B,2]
           |
           +-[A,1]

[PASS]
Binary tree structure:

                    +-[Y,10]
                    |
                 +-[X,10]
                 |
              +-[S,10]
              |  |
              |  +-[R,10]
              |     |
              |     +-[Q,10]
              |        |
              |        +-[P,10]
              |
           +-[O,16]
           |
        +-[N,14]
        |  |
        |  +-[M,13]
        |
     +-[K,11]
     |  |
     |  +-[J,10]
     |     |
     |     +-[I,9]
     |
  +-[H,8]
     |
     |     +-[G,7]
     |     |
     |  +-[F,6]
     |  |  |
     |  |  +-[E,5]
     |  |
     +-[D,4]
        |
        |  +-[C,3]
        |  |
        +-[B,2]
           |
           +-[A,1]


[btree-iter-20.log]
[test_tree_delete_missing] Delete a node that doesn't exist (U)
Binary tree structure:

           +-[O,16]
           |
        +-[N,14]
        |  |
        |  +-[M,13]
        |
     +-[L,12]
     |  |
     |  |  +-[K,11]
     |  |  |
     |  +-[J,10]
     |     |
     |     +-[I,9]
     |
  +-[H,8]
     |
     |     +-[G,7]
     |     |
     |  +-[F,6]
     |  |  |
     |  |  +-[E,5]
     |  |
     +-[D,4]
        |
        |  +-[C,3]
        |  |
        +-[B,2]
           |
           +-[A,1]

[PASS]
Binary tree structure:

           +-[O,16]
           |
        +-[N,14]
        |  |
        |  +-[M,13]
        |
     +-[L,12]
     |  |
     |  |  +-[K,11]
     |  |  |
     |  +-[J,10]
     |     |
     |     +-[I,9]
     |
  +-[H,8]
     |
     |     +-[G,7]
     |     |
     |  +-[F,6]
     |  |  |
     |  |  +-[E,5]
     |  |
     +-[D,4]
        |
        |  +-[C,3]
        |  |
        +-[B,2]
           |
           +-[A,1]


[btree-iter-21.log]
[test_tree_delete_root] Delete the root node (H)
Binary tree structure:

           +-[O,16]
           |
        +-[N,14]
        |  |
        |  +-[M,13]
        |
     +-[L,12]
     |  |
     |  |  +-[K,11]
     |  |  |
     |  +-[J,10]
     |     |
     |     +-[I,9]
     |
  +-[H,8]
     |
     |     +-[G,7]
     |     |
     |  +-[F,6]
     |  |  |
     |  |  +-[E,5]
     |  |
     +-[D,4]
        |
        |  +-[C,3]
        |  |
        +-[B,2]
           |
           +-[A,1]

[PASS]
Binary tree structure:

           +-[O,16]
           |
        +-[N,14]
        |  |
        |  +-[M,13]
        |
     +-[L,12]
     |  |
     |  |  +-[K,11]
     |  |  |
     |  +-[J,10]
     |     |
     |     +-[I,9]
     |
  +-[G,7]
     |
     |  +-[F,6]
     |  |  |
     |  |  +-[E,5]
     |  |
     +-[D,4]
        |
        |  +-[C,3]
        |  |
        +-[B,2]
           |
           +-[A,1]


[btree-iter-22.log]
[test_tree_dispose_filled] Dispose the whole tree
Binary tree structure:

           +-[O,16]
           |
        +-[N,14]
        |  |
        |  +-[M,13]
        |
     +-[L,12]
     |  |
     |  |  +-[K,11]
     |  |  |
     |  +-[J,10]
     |     |
     |     +-[I,9]
     |
  +-[H,8]
     |
     |     +-[G,7]
     |     |
     |  +-[F,6]
     |  |  |
     |  |  +-[E,5]
     |  |
     +-[D,4]
        |
        |  +-[C,3]
        |  |
        +-[B,2]
           |
           +-[A,1]

[PASS]
Binary tree structure:

Tree is empty


[btree-iter-23.log]
[test_tree_preorder] Traverse the tree using preorder
[PASS]
Binary tree structure:

     +-[E,5]
     |
  +-[D,1]
     |
     |  +-[C,4]
     |  |
     +-[B,2]
        |
        +-[A,3]


[btree-iter-24.log]
[test_tree_inorder] Traverse the tree using inorder
[PASS]
Binary tree structure:

     +-[E,5]
     |
  +-[D,1]
     |
     |  +-[C,4]
     |  |
     +-[B,2]
        |
        +-[A,3]


[btree-iter-25.log]
[test_tree_postorder] Traverse the tree using postorder
[PASS]
Binary tree structure:

     +-[E,5]
     |
  +-[D,1]
     |
     |  +-[C,4]
     |  |
     +-[B,2]
        |
        +-[A,3]


[btree-iter-memcheck-11.log]
==45530== Memcheck, a memory error detector
==45530== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==45530== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==45530== Command: ./test 11
==45530== 
==45530== 
==45530== HEAP SUMMARY:
==45530==     in use at exit: 4,096 bytes in 1 blocks
==45530==   total heap usage: 47 allocs, 46 frees, 5,028 bytes allocated
==45530== 
==45530== LEAK SUMMARY:
==45530==    definitely lost: 0 bytes in 0 blocks
==45530==    indirectly lost: 0 bytes in 0 blocks
==45530==      possibly lost: 0 bytes in 0 blocks
==45530==    still reachable: 0 bytes in 0 blocks
==45530==         suppressed: 4,096 bytes in 1 blocks
==45530== 
==45530== For lists of detected and suppressed errors, rerun with: -s
==45530== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 1 from 1)
[btree-iter-memcheck-22.log]
==45535== Memcheck, a memory error detector
==45535== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==45535== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==45535== Command: ./test 22
==45535== 
==45535== 
==45535== HEAP SUMMARY:
==45535==     in use at exit: 4,096 bytes in 1 blocks
==45535==   total heap usage: 48 allocs, 47 frees, 5,276 bytes allocated
==45535== 
==45535== LEAK SUMMARY:
==45535==    definitely lost: 0 bytes in 0 blocks
==45535==    indirectly lost: 0 bytes in 0 blocks
==45535==      possibly lost: 0 bytes in 0 blocks
==45535==    still reachable: 0 bytes in 0 blocks
==45535==         suppressed: 4,096 bytes in 1 blocks
==45535== 
==45535== For lists of detected and suppressed errors, rerun with: -s
==45535== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 1 from 1)
[btree-rec-compilation.log]
gcc -Wall -std=c11 -pedantic -o btree/rec/test btree/test_advanced.c btree/test_util_advanced.c btree/rec/btree.c
[btree-rec-1.log]
[test_tree_init] Initialize the tree
[PASS]

[btree-rec-2.log]
[test_tree_dispose_empty] Dispose the tree
[PASS]

[btree-rec-3.log]
[test_tree_search_empty] Search in an empty tree (A)
[PASS]

[btree-rec-4.log]
[test_tree_search_empty_result] Search in an empty tree (A) and check the result
[PASS]

[btree-rec-5.log]
[test_tree_insert_root_node] Insert an item (H,1)
[PASS]
Binary tree structure:

  +-[H,1]


[btree-rec-6.log]
[test_tree_insert_root_values] Insert an item (H,1)
[PASS]
Binary tree structure:

  +-[H,1]


[btree-rec-7.log]
[test_tree_insert_root_children] Insert an item (H,1)
[PASS]
Binary tree structure:

  +-[H,1]


[btree-rec-8.log]
[test_tree_search_root] Search in a single node tree (H)
[PASS]
Binary tree structure:

  +-[H,1]


[btree-rec-9.log]
[test_tree_search_root_result] Search in a single node tree (H)
[PASS]
Binary tree structure:

  +-[H,1]


[btree-rec-10.log]
[test_tree_update_root] Update a node in a single node tree (H,1)->(H,8)
Binary tree structure:

  +-[H,1]

[PASS]
Binary tree structure:

  +-[H,8]


[btree-rec-11.log]
[test_tree_insert_many] Insert many values
[PASS]
Binary tree structure:

           +-[O,16]
           |
        +-[N,14]
        |  |
        |  +-[M,13]
        |
     +-[L,12]
     |  |
     |  |  +-[K,11]
     |  |  |
     |  +-[J,10]
     |     |
     |     +-[I,9]
     |
  +-[H,8]
     |
     |     +-[G,7]
     |     |
     |  +-[F,6]
     |  |  |
     |  |  +-[E,5]
     |  |
     +-[D,4]
        |
        |  +-[C,3]
        |  |
        +-[B,2]
           |
           +-[A,1]


[btree-rec-12.log]
[test_tree_search] Search for an item deeper in the tree (A)
[PASS]
Binary tree structure:

           +-[O,16]
           |
        +-[N,14]
        |  |
        |  +-[M,13]
        |
     +-[L,12]
     |  |
     |  |  +-[K,11]
     |  |  |
     |  +-[J,10]
     |     |
     |     +-[I,9]
     |
  +-[H,8]
     |
     |     +-[G,7]
     |     |
     |  +-[F,6]
     |  |  |
     |  |  +-[E,5]
     |  |
     +-[D,4]
        |
        |  +-[C,3]
        |  |
        +-[B,2]
           |
           +-[A,1]


[btree-rec-13.log]
[test_tree_search_result] Search for an item deeper in the tree (A)
[PASS]
Binary tree structure:

           +-[O,16]
           |
        +-[N,14]
        |  |
        |  +-[M,13]
        |
     +-[L,12]
     |  |
     |  |  +-[K,11]
     |  |  |
     |  +-[J,10]
     |     |
     |     +-[I,9]
     |
  +-[H,8]
     |
     |     +-[G,7]
     |     |
     |  +-[F,6]
     |  |  |
     |  |  +-[E,5]
     |  |
     +-[D,4]
        |
        |  +-[C,3]
        |  |
        +-[B,2]
           |
           +-[A,1]


[btree-rec-14.log]
[test_tree_search_missing] Search for a missing key (X)
[PASS]
Binary tree structure:

           +-[O,16]
           |
        +-[N,14]
        |  |
        |  +-[M,13]
        |
     +-[L,12]
     |  |
     |  |  +-[K,11]
     |  |  |
     |  +-[J,10]
     |     |
     |     +-[I,9]
     |
  +-[H,8]
     |
     |     +-[G,7]
     |     |
     |  +-[F,6]
     |  |  |
     |  |  +-[E,5]
     |  |
     +-[D,4]
        |
        |  +-[C,3]
        |  |
        +-[B,2]
           |
           +-[A,1]


[btree-rec-15.log]
[test_tree_search_missing_result] Search for a missing key (X)
[PASS]
Binary tree structure:

           +-[O,16]
           |
        +-[N,14]
        |  |
        |  +-[M,13]
        |
     +-[L,12]
     |  |
     |  |  +-[K,11]
     |  |  |
     |  +-[J,10]
     |     |
     |     +-[I,9]
     |
  +-[H,8]
     |
     |     +-[G,7]
     |     |
     |  +-[F,6]
     |  |  |
     |  |  +-[E,5]
     |  |
     +-[D,4]
        |
        |  +-[C,3]
        |  |
        +-[B,2]
           |
           +-[A,1]


[btree-rec-16.log]
[test_tree_delete_leaf] Delete a leaf node (A)
Binary tree structure:

           +-[O,16]
           |
        +-[N,14]
        |  |
        |  +-[M,13]
        |
     +-[L,12]
     |  |
     |  |  +-[K,11]
     |  |  |
     |  +-[J,10]
     |     |
     |     +-[I,9]
     |
  +-[H,8]
     |
     |     +-[G,7]
     |     |
     |  +-[F,6]
     |  |  |
     |  |  +-[E,5]
     |  |
     +-[D,4]
        |
        |  +-[C,3]
        |  |
        +-[B,2]
           |
           +-[A,1]

[PASS]
Binary tree structure:

           +-[O,16]
           |
        +-[N,14]
        |  |
        |  +-[M,13]
        |
     +-[L,12]
     |  |
     |  |  +-[K,11]
     |  |  |
     |  +-[J,10]
     |     |
     |     +-[I,9]
     |
  +-[H,8]
     |
     |     +-[G,7]
     |     |
     |  +-[F,6]
     |  |  |
     |  |  +-[E,5]
     |  |
     +-[D,4]
        |
        |  +-[C,3]
        |  |
        +-[B,2]


[btree-rec-17.log]
[test_tree_delete_left_subtree] Delete a node with only left subtree (R)
Binary tree structure:

                    +-[Y,10]
                    |
                 +-[X,10]
                 |
              +-[S,10]
              |  |
              |  +-[R,10]
              |     |
              |     +-[Q,10]
              |        |
              |        +-[P,10]
              |
           +-[O,16]
           |
        +-[N,14]
        |  |
        |  +-[M,13]
        |
     +-[L,12]
     |  |
     |  |  +-[K,11]
     |  |  |
     |  +-[J,10]
     |     |
     |     +-[I,9]
     |
  +-[H,8]
     |
     |     +-[G,7]
     |     |
     |  +-[F,6]
     |  |  |
     |  |  +-[E,5]
     |  |
     +-[D,4]
        |
        |  +-[C,3]
        |  |
        +-[B,2]
           |
           +-[A,1]

[PASS]
Binary tree structure:

                    +-[Y,10]
                    |
                 +-[X,10]
                 |
              +-[S,10]
              |  |
              |  +-[Q,10]
              |     |
              |     +-[P,10]
              |
           +-[O,16]
           |
        +-[N,14]
        |  |
        |  +-[M,13]
        |
     +-[L,12]
     |  |
     |  |  +-[K,11]
     |  |  |
     |  +-[J,10]
     |     |
     |     +-[I,9]
     |
  +-[H,8]
     |
     |     +-[G,7]
     |     |
     |  +-[F,6]
     |  |  |
     |  |  +-[E,5]
     |  |
     +-[D,4]
        |
        |  +-[C,3]
        |  |
        +-[B,2]
           |
           +-[A,1]


[btree-rec-18.log]
[test_tree_delete_right_subtree] Delete a node with only right subtree (X)
Binary tree structure:

                    +-[Y,10]
                    |
                 +-[X,10]
                 |
              +-[S,10]
              |  |
              |  +-[R,10]
              |     |
              |     +-[Q,10]
              |        |
              |        +-[P,10]
              |
           +-[O,16]
           |
        +-[N,14]
        |  |
        |  +-[M,13]
        |
     +-[L,12]
     |  |
     |  |  +-[K,11]
     |  |  |
     |  +-[J,10]
     |     |
     |     +-[I,9]
     |
  +-[H,8]
     |
     |     +-[G,7]
     |     |
     |  +-[F,6]
     |  |  |
     |  |  +-[E,5]
     |  |
     +-[D,4]
        |
        |  +-[C,3]
        |  |
        +-[B,2]
           |
           +-[A,1]

[PASS]
Binary tree structure:

                 +-[Y,10]
                 |
              +-[S,10]
              |  |
              |  +-[R,10]
              |     |
              |     +-[Q,10]
              |        |
              |        +-[P,10]
              |
           +-[O,16]
           |
        +-[N,14]
        |  |
        |  +-[M,13]
        |
     +-[L,12]
     |  |
     |  |  +-[K,11]
     |  |  |
     |  +-[J,10]
     |     |
     |     +-[I,9]
     |
  +-[H,8]
     |
     |     +-[G,7]
     |     |
     |  +-[F,6]
     |  |  |
     |  |  +-[E,5]
     |  |
     +-[D,4]
        |
        |  +-[C,3]
        |  |
        +-[B,2]
           |
           +-[A,1]


[btree-rec-19.log]
[test_tree_delete_both_subtrees] Delete a node with both subtrees (L)
Binary tree structure:

                    +-[Y,10]
                    |
                 +-[X,10]
                 |
              +-[S,10]
              |  |
              |  +-[R,10]
              |     |
              |     +-[Q,10]
              |        |
              |        +-[P,10]
              |
           +-[O,16]
           |
        +-[N,14]
        |  |
        |  +-[M,13]
        |
     +-[L,12]
     |  |
     |  |  +-[K,11]
     |  |  |
     |  +-[J,10]
     |     |
     |     +-[I,9]
     |
  +-[H,8]
     |
     |     +-[G,7]
     |     |
     |  +-[F,6]
     |  |  |
     |  |  +-[E,5]
     |  |
     +-[D,4]
        |
        |  +-[C,3]
        |  |
        +-[B,2]
           |
           +-[A,1]

[PASS]
Binary tree structure:

                    +-[Y,10]
                    |
                 +-[X,10]
                 |
              +-[S,10]
              |  |
              |  +-[R,10]
              |     |
              |     +-[Q,10]
              |        |
              |        +-[P,10]
              |
           +-[O,16]
           |
        +-[N,14]
        |  |
        |  +-[M,13]
        |
     +-[K,11]
     |  |
     |  +-[J,10]
     |     |
     |     +-[I,9]
     |
  +-[H,8]
     |
     |     +-[G,7]
     |     |
     |  +-[F,6]
     |  |  |
     |  |  +-[E,5]
     |  |
     +-[D,4]
        |
        |  +-[C,3]
        |  |
        +-[B,2]
           |
           +-[A,1]


[btree-rec-20.log]
[test_tree_delete_missing] Delete a node that doesn't exist (U)
Binary tree structure:

           +-[O,16]
           |
        +-[N,14]
        |  |
        |  +-[M,13]
        |
     +-[L,12]
     |  |
     |  |  +-[K,11]
     |  |  |
     |  +-[J,10]
     |     |
     |     +-[I,9]
     |
  +-[H,8]
     |
     |     +-[G,7]
     |     |
     |  +-[F,6]
     |  |  |
     |  |  +-[E,5]
     |  |
     +-[D,4]
        |
        |  +-[C,3]
        |  |
        +-[B,2]
           |
           +-[A,1]

[PASS]
Binary tree structure:

           +-[O,16]
           |
        +-[N,14]
        |  |
        |  +-[M,13]
        |
     +-[L,12]
     |  |
     |  |  +-[K,11]
     |  |  |
     |  +-[J,10]
     |     |
     |     +-[I,9]
     |
  +-[H,8]
     |
     |     +-[G,7]
     |     |
     |  +-[F,6]
     |  |  |
     |  |  +-[E,5]
     |  |
     +-[D,4]
        |
        |  +-[C,3]
        |  |
        +-[B,2]
           |
           +-[A,1]


[btree-rec-21.log]
[test_tree_delete_root] Delete the root node (H)
Binary tree structure:

           +-[O,16]
           |
        +-[N,14]
        |  |
        |  +-[M,13]
        |
     +-[L,12]
     |  |
     |  |  +-[K,11]
     |  |  |
     |  +-[J,10]
     |     |
     |     +-[I,9]
     |
  +-[H,8]
     |
     |     +-[G,7]
     |     |
     |  +-[F,6]
     |  |  |
     |  |  +-[E,5]
     |  |
     +-[D,4]
        |
        |  +-[C,3]
        |  |
        +-[B,2]
           |
           +-[A,1]

[PASS]
Binary tree structure:

           +-[O,16]
           |
        +-[N,14]
        |  |
        |  +-[M,13]
        |
     +-[L,12]
     |  |
     |  |  +-[K,11]
     |  |  |
     |  +-[J,10]
     |     |
     |     +-[I,9]
     |
  +-[G,7]
     |
     |  +-[F,6]
     |  |  |
     |  |  +-[E,5]
     |  |
     +-[D,4]
        |
        |  +-[C,3]
        |  |
        +-[B,2]
           |
           +-[A,1]


[btree-rec-22.log]
[test_tree_dispose_filled] Dispose the whole tree
Binary tree structure:

           +-[O,16]
           |
        +-[N,14]
        |  |
        |  +-[M,13]
        |
     +-[L,12]
     |  |
     |  |  +-[K,11]
     |  |  |
     |  +-[J,10]
     |     |
     |     +-[I,9]
     |
  +-[H,8]
     |
     |     +-[G,7]
     |     |
     |  +-[F,6]
     |  |  |
     |  |  +-[E,5]
     |  |
     +-[D,4]
        |
        |  +-[C,3]
        |  |
        +-[B,2]
           |
           +-[A,1]

[PASS]
Binary tree structure:

Tree is empty


[btree-rec-23.log]
[test_tree_preorder] Traverse the tree using preorder
[PASS]
Binary tree structure:

     +-[E,5]
     |
  +-[D,1]
     |
     |  +-[C,4]
     |  |
     +-[B,2]
        |
        +-[A,3]


[btree-rec-24.log]
[test_tree_inorder] Traverse the tree using inorder
[PASS]
Binary tree structure:

     +-[E,5]
     |
  +-[D,1]
     |
     |  +-[C,4]
     |  |
     +-[B,2]
        |
        +-[A,3]


[btree-rec-25.log]
[test_tree_postorder] Traverse the tree using postorder
[PASS]
Binary tree structure:

     +-[E,5]
     |
  +-[D,1]
     |
     |  +-[C,4]
     |  |
     +-[B,2]
        |
        +-[A,3]


[btree-rec-memcheck-11.log]
==45637== Memcheck, a memory error detector
==45637== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==45637== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==45637== Command: ./test 11
==45637== 
==45637== 
==45637== HEAP SUMMARY:
==45637==     in use at exit: 4,096 bytes in 1 blocks
==45637==   total heap usage: 46 allocs, 45 frees, 4,780 bytes allocated
==45637== 
==45637== LEAK SUMMARY:
==45637==    definitely lost: 0 bytes in 0 blocks
==45637==    indirectly lost: 0 bytes in 0 blocks
==45637==      possibly lost: 0 bytes in 0 blocks
==45637==    still reachable: 0 bytes in 0 blocks
==45637==         suppressed: 4,096 bytes in 1 blocks
==45637== 
==45637== For lists of detected and suppressed errors, rerun with: -s
==45637== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 1 from 1)
[btree-rec-memcheck-22.log]
==45644== Memcheck, a memory error detector
==45644== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==45644== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==45644== Command: ./test 22
==45644== 
==45644== 
==45644== HEAP SUMMARY:
==45644==     in use at exit: 4,096 bytes in 1 blocks
==45644==   total heap usage: 46 allocs, 45 frees, 4,780 bytes allocated
==45644== 
==45644== LEAK SUMMARY:
==45644==    definitely lost: 0 bytes in 0 blocks
==45644==    indirectly lost: 0 bytes in 0 blocks
==45644==      possibly lost: 0 bytes in 0 blocks
==45644==    still reachable: 0 bytes in 0 blocks
==45644==         suppressed: 4,096 bytes in 1 blocks
==45644== 
==45644== For lists of detected and suppressed errors, rerun with: -s
==45644== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 1 from 1)
